<?php

namespace ATManager\FrontendBundle\Entity;

use Doctrine\ORM\EntityRepository;
use Doctrine\ORM\Query\Expr\Join;
use ATManager\AtBundle\Entity\AtHistorico;

/**
 * AtRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class AtRepository extends EntityRepository
{
    public function findByFiltroAt($numero, $personasolicita, $sectorsolicita)
    {			
	$em = $this->getEntityManager();
	$query = $em->createQueryBuilder()
            ->select('a')
            ->from('FrontendBundle:At','a')
            ->where('1 = 1');
            if ($numero){
		$query->andWhere('a.id = :id');
		$query->setParameter('id',$numero);
            }
            if ($personasolicita){
		$query->andWhere('a.personasolicita LIKE :personasolicita');
		$query->setParameter('personasolicita','%'.$personasolicita.'%');
            }
            if ($sectorsolicita){
	    	$query->andWhere('a.sectorsolicita = :sectorsolicita');
		$query->setParameter('sectorsolicita',$sectorsolicita);
            }    
            $query->setMaxResults(50);
            $query = $query->getQuery();
            return $query->getResult();		
    }
    public function findByFiltroPorSectorEstadio($sector, $estadio)
    {
        $em = $this->getEntityManager();		  	
	$query = $em->createQuery('SELECT a FROM FrontendBundle:At a
            INNER JOIN AtBundle:AtHistorico h WITH a.id = h.at
            WHERE a.sectordestino = :sector
		AND h.estadio = :estadio
		AND h.estadio = (SELECT IDENTITY(h1.estadio)
                    FROM AtBundle:AtHistorico h1 
                    WHERE h1.at=a.id and h1.fecha = (
			SELECT max(h2.fecha)
			FROM AtBundle:AtHistorico h2
			WHERE h2.at = a.id))')	
            ->setParameter('sector', $sector)
            ->setParameter('estadio', $estadio);
        return $query->getResult();
    }
    public function findByFiltroUltimoEstadio($at)
    {
	echo $at;
	$em = $this->getEntityManager();		  	
	$query = $em->createQuery('SELECT IDENTITY(h1.estadio)
            FROM AtBundle:AtHistorico h1 
            WHERE h1.fecha = (SELECT max(h2.fecha)
		FROM AtBundle:AtHistorico h2 WHERE h2.at = :at )')			
            ->setParameter('at', $at);	   
	$estadio = $query->getOneOrNullResult();
	echo "Estadio: ".$estadio;
	return $estadio;			   		
    }
    // recibe el técnico y rol cómo parámetros y devuelve un array con 
    // las ats asignadas al técnico
    public function findByFiltroPorTecnico($tecnico,$rol,$estadio)
    {
        $em = $this->getEntityManager();		  	
        $query = $em->createQuery(
                'SELECT a
                FROM FrontendBundle:At a
                INNER JOIN AtBundle:AtTecnico t with a.id = t.at
                INNER JOIN AtBundle:AtHistorico h with a.id=h.at 
                WHERE t.tecnico = :tecnico 
                AND t.rol = :rol
                AND h.estadio= :estadio
                AND h.estadio = 
                    (SELECT IDENTITY(h1.estadio)
                    FROM AtBundle:AtHistorico h1 
                    WHERE h1.fecha = (
                    SELECT max(h2.fecha)
                    FROM AtBundle:AtHistorico h2
                    WHERE h2.at = a.id))
             		ORDER BY a.id DESC')
                ->setParameter('tecnico', $tecnico)
                ->setParameter('rol', $rol)
                ->setParameter('estadio', $estadio);
            
                return $query->getResult();
	}

	public function findByFiltroPorTecnicoSinEstadio($tecnico,$rol)
	{
            $em = $this->getEntityManager();		  	
            $query = $em->createQuery(
                'SELECT a
                FROM FrontendBundle:At a
                INNER JOIN AtBundle:AtTecnico t with a.id = t.at
                INNER JOIN AtBundle:AtHistorico h with a.id=h.at 
                WHERE t.tecnico = :tecnico 
                AND t.rol = :rol
               ORDER BY a.id DESC')
                ->setParameter('tecnico', $tecnico)
                ->setParameter('rol', $rol);
               
            
                return $query->getResult();
	}

    /*

    10-06-2015
    dario
    consulta sql

    SELECT a.id, a.descripcion, h.estadio_id, tec.id
    FROM At a
    INNER JOIN AtTecnico t ON a.id = t.at_id
    INNER JOIN Tecnico tec ON t.tecnico_id = tec.id
    INNER JOIN AtHistorico h ON a.id = h.at_id
    WHERE tec.sector_id =1
    AND h.estadio_id =3
    AND h.estadio_id = ( 
    SELECT estadio_id
    FROM AtHistorico h1
    WHERE h1.fecha = ( 
    SELECT MAX( h2.fecha ) 
    FROM AtHistorico h2
    WHERE h2.at_id = a.id ) ) 
    ORDER BY tec.id


    */
    public function findByFiltroDeTodosTecnicoDelSector($tecnico,$rol,$sector,$estadio)
    {
            if($estadio)
            {    
            $em = $this->getEntityManager();            
            $query = $em->createQuery(
                'SELECT a
                FROM FrontendBundle:At a
                INNER JOIN AtBundle:AtTecnico t with a.id = t.at
                INNER JOIN AtBundle:AtHistorico h with a.id=h.at
                INNER JOIN BackendBundle:tecnico tec with t.tecnico=tec.id 
                WHERE tec.sector = :sector 
                AND t.rol = :rol
                ORDER BY a.prioridad')
                ->setParameter('tecnico', $tecnico)
                ->setParameter('rol', $rol)
                ->setParameter('sector', $sector);
               
            
                return $query->getResult();
            }else{

                    $em = $this->getEntityManager();            
            $query = $em->createQuery(
                'SELECT a
                FROM FrontendBundle:At a
                INNER JOIN AtBundle:AtTecnico t with a.id = t.at
                INNER JOIN AtBundle:AtHistorico h with a.id=h.at
                INNER JOIN BackendBundle:tecnico tec with t.tecnico=tec.id 
                WHERE tec.sector = :sector 
                AND t.rol = :rol
                ORDER BY a.prioridad')
                ->setParameter('tecnico', $tecnico)
                ->setParameter('rol', $rol)
                ->setParameter('sector', $sector);
               
            
                return $query->getResult();

            }    
    }


    public function findByCasosXSintoma($descripcion)
    {
        $em = $this->getEntityManager();		  	
        $query = $em->createQuery(
        'SELECT a.id as AtId, a.fechafin as fechaFinal, a.descripcion as Sintoma, ah.comentario as Tareas 
        FROM FrontendBundle:At a
            INNER JOIN AtBundle:AtHistorico ah with a.id = ah.at
            INNER JOIN BackendBundle:Estadio e with ah.estadio = e.id
            INNER JOIN BackendBundle:EstadioClasif ec with e.clasificacion = ec.id
        WHERE a.descripcion LIKE :descripcion
            AND a.fechafin is not null
            AND ec.finalizaAt = 1')
        ->setParameter('descripcion', '%'.$descripcion.'%');
        return $query->getResult();    
    }

    public function findByCasosPorFallaDescripcion($falla,$descripcion)
    {
            $em = $this->getEntityManager();            
            if($falla)
            {   
            $query = $em->createQuery(
            'SELECT a.id as AtId, 
                    a.fechafin as fechaFinal, 
                    a.descripcion as Sintoma, 
                    ah.comentario as Tareas 
                    FROM FrontendBundle:At a
                    INNER JOIN AtBundle:AtFalla af with a.id = af.at 
                    INNER JOIN AtBundle:AtHistorico ah with a.id = ah.at
                    INNER JOIN BackendBundle:Estadio e with ah.estadio = e.id
                    INNER JOIN BackendBundle:EstadioClasif ec with e.clasificacion = ec.id
                    WHERE af.falla = :falla
                    AND a.descripcion LIKE :descripcion
                    AND a.fechafin is not null
                    AND ec.finalizaAt = 1')
                    ->setParameter('falla', $falla)           
                    ->setParameter('descripcion', '%'.$descripcion.'%');
                return $query->getResult();
             }else{

                    $query = $em->createQuery(
                    'SELECT a.id as AtId, 
                    a.fechafin as fechaFinal, 
                    a.descripcion as Sintoma, 
                    ah.comentario as Tareas 
                    FROM FrontendBundle:At a
                    INNER JOIN AtBundle:AtHistorico ah with a.id = ah.at
                    INNER JOIN BackendBundle:Estadio e with ah.estadio = e.id
                    INNER JOIN BackendBundle:EstadioClasif ec with e.clasificacion = ec.id
                    WHERE a.descripcion LIKE :descripcion
                    AND a.fechafin is not null
                    AND ec.finalizaAt = 1')
                    ->setParameter('descripcion', '%'.$descripcion.'%');
                return $query->getResult();

             }   
    }

    public function findByCasosPorNumeroAt($numAt)
    {
            $em = $this->getEntityManager();            
               
            $query = $em->createQuery(
            'SELECT a.id as AtId, 
                    a.fechafin as fechaFinal, 
                    a.descripcion as Sintoma, 
                    ah.comentario as Tareas 
                    FROM FrontendBundle:At a
                    INNER JOIN AtBundle:AtFalla af with a.id = af.at 
                    INNER JOIN AtBundle:AtHistorico ah with a.id = ah.at
                    INNER JOIN BackendBundle:Estadio e with ah.estadio = e.id
                    INNER JOIN BackendBundle:EstadioClasif ec with e.clasificacion = ec.id
                    WHERE a.id = :at
                    AND a.fechafin is not null
                    AND ec.finalizaAt = 1')
                    ->setParameter('at', $numAt);           
                    
                    return $query->getResult();
                
    }



}
